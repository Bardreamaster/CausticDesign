#version 330

struct LightSource{
  //position in view space
  vec4 position;
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
};

struct Material{
  // ambient color
  vec4 ambient;
  // diffuse color
  vec4 diffuse;
  // specular color
  vec4 specular;
  // shininess
  float shininess;
};

uniform LightSource lightSource;
uniform Material material;

// position and normal in view space
vec4 blinnPhongReflection(vec3 position, vec3 normal){

	vec3 lightDir = normalize(lightSource.position.xyz - position);

	// lamberts law; additionally, use clamp to ensure value is always greater than or equal to 0
	float lightCos = clamp(dot(normal, lightDir), 0.0, 1.0);

	// (- position) also describes vector from vertex to camera ( origin in view space )
	vec3 H = normalize(lightDir - normalize(position));
	
	float HN = max(dot(H, normal), 0);
	HN = pow(HN, material.shininess/*10.0*material.shininess*/);

	// specular blinnPhongReflection..
	vec4 specular = material.specular * lightSource.specular * HN;

	// ambient not influenced by blinnPhongReflection
	vec4 ambient = lightSource.ambient * material.ambient;

	// diffuse not influenced by blinnPhongReflection
	vec4 diffuse = lightSource.diffuse * material.diffuse;

	// lamberts law only applies for diffuse [1]
	return ambient + lightCos * diffuse + specular;
}

